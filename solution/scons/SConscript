import os
import string

Import('release_dynamic_env', 'release_static_env', 'debug_dynamic_env', 'debug_static_env', 'PLATFORM_STR', 'SRC_DIR', 'BUILD_DIR', 'TEST_DIR')

#print 'BOOST_ROOT: ' + BOOST_ROOT
#print 'BOOST_ROOT_LIB: ' + BOOST_ROOT_LIB
#print 'SRC_DIR: ' + SRC_DIR
#print 'BUILD_DIR: ' + BUILD_DIR
#print 'PLATFORM_STR: ' + PLATFORM_STR


## Add a post-build step to embed the manifest using mt.exe
## The number at the end of the line indicates the file type (1: EXE; 2:DLL).
#if Platform().name == 'win32':
#	release_dynamic_env.AddPostAction(stress_random_instruction_generator_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


# -------------- stress_random_instruction_generator

obj = release_dynamic_env.Object('stress_random_instruction_generator_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_generator.cpp'])
stress_random_instruction_generator_dynamic_rel = release_dynamic_env.Program('stress_random_instruction_generator_' + PLATFORM_STR + '_dynamic_release', obj ) #CPPFLAGS = ['/MD'] ) 

if Platform().name == 'win32':
	release_dynamic_env.AddPostAction(stress_random_instruction_generator_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')

Command(TEST_DIR + "/" + string.replace(str( stress_random_instruction_generator_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( stress_random_instruction_generator_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))


obj = release_static_env.Object('stress_random_instruction_generator_static_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_generator.cpp'])
stress_random_instruction_generator_static_rel = release_static_env.Program('stress_random_instruction_generator_' + PLATFORM_STR + '_static_release', obj )

obj = debug_dynamic_env.Object('stress_random_instruction_generator_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_generator.cpp'])
stress_random_instruction_generator_dynamic_dbg = debug_dynamic_env.Program('stress_random_instruction_generator_' + PLATFORM_STR + '_dynamic_debug', obj)

if Platform().name == 'win32':
	debug_dynamic_env.AddPostAction(stress_random_instruction_generator_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


obj = debug_static_env.Object('stress_random_instruction_generator_static_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_generator.cpp'])
stress_random_instruction_generator_static_dbg = debug_static_env.Program('stress_random_instruction_generator_' + PLATFORM_STR + '_static_debug', obj)




# -------------- stress_random_instruction_interpreter

obj = release_dynamic_env.Object('stress_random_instruction_interpreter_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_interpreter.cpp'])
stress_random_instruction_interpreter_dynamic_rel = release_dynamic_env.Program('stress_random_instruction_interpreter_' + PLATFORM_STR + '_dynamic_release', obj ) #CPPFLAGS = ['/MD'] )

if Platform().name == 'win32':
	release_dynamic_env.AddPostAction(stress_random_instruction_interpreter_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')

Command(TEST_DIR + "/" + string.replace(str( stress_random_instruction_interpreter_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( stress_random_instruction_interpreter_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))



obj = release_static_env.Object('stress_random_instruction_interpreter_static_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_interpreter.cpp'])
stress_random_instruction_interpreter_static_rel = release_static_env.Program('stress_random_instruction_interpreter_' + PLATFORM_STR + '_static_release', obj )

obj = debug_dynamic_env.Object('stress_random_instruction_interpreter_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_interpreter.cpp'])
stress_random_instruction_interpreter_dynamic_dbg = debug_dynamic_env.Program('stress_random_instruction_interpreter_' + PLATFORM_STR + '_dynamic_debug', obj)

if Platform().name == 'win32':
	debug_dynamic_env.AddPostAction(stress_random_instruction_interpreter_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


obj = debug_static_env.Object('stress_random_instruction_interpreter_static_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_random_instruction_interpreter.cpp'])
stress_random_instruction_interpreter_static_dbg = debug_static_env.Program('stress_random_instruction_interpreter_' + PLATFORM_STR + '_static_debug', obj)






# -------------- stress_test_watcher

obj = release_dynamic_env.Object('stress_test_watcher_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_watcher.cpp'])
stress_test_watcher_dynamic_rel = release_dynamic_env.Program('stress_test_watcher_' + PLATFORM_STR + '_dynamic_release', obj ) #CPPFLAGS = ['/MD'] )

if Platform().name == 'win32':
	release_dynamic_env.AddPostAction(stress_test_watcher_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')

Command(TEST_DIR + "/" + string.replace(str( stress_test_watcher_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( stress_test_watcher_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))


obj = release_static_env.Object('stress_test_watcher_static_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_watcher.cpp'])
stress_test_watcher_static_rel = release_static_env.Program('stress_test_watcher_' + PLATFORM_STR + '_static_release', obj )

obj = debug_dynamic_env.Object('stress_test_watcher_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_watcher.cpp'])
stress_test_watcher_dynamic_dbg = debug_dynamic_env.Program('stress_test_watcher_' + PLATFORM_STR + '_dynamic_debug', obj)

if Platform().name == 'win32':
	debug_dynamic_env.AddPostAction(stress_test_watcher_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


obj = debug_static_env.Object('stress_test_watcher_static_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_watcher.cpp'])
stress_test_watcher_static_dbg = debug_static_env.Program('stress_test_watcher_' + PLATFORM_STR + '_static_debug', obj)


##release_dynamic_env.Install(BIN_DIR, stress_test_watcher_dynamic_rel)  
#release_dynamic_env.Install(TEST_DIR, stress_test_watcher_dynamic_rel)  
#
##release_static_env.Install(BIN_DIR, stress_test_watcher_static_rel)  
#release_static_env.Install(TEST_DIR, stress_test_watcher_static_rel)  
#
##debug_dynamic_env.Install(BIN_DIR, stress_test_watcher_dynamic_dbg)  
##debug_dynamic_env.Install(TEST_DIR, stress_test_watcher_dynamic_dbg)  
#
##debug_static_env.Install(BIN_DIR, stress_test_watcher_static_dbg)  
##debug_static_env.Install(TEST_DIR, stress_test_watcher_static_dbg)  






# -------------- stress_test_file_generator

obj = release_dynamic_env.Object('stress_test_file_generator_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator.cpp'])
stress_test_file_generator_dynamic_rel = release_dynamic_env.Program('stress_test_file_generator_' + PLATFORM_STR + '_dynamic_release', obj)

if Platform().name == 'win32':
	release_dynamic_env.AddPostAction(stress_test_file_generator_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')

Command(TEST_DIR + "/" + string.replace(str( stress_test_file_generator_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( stress_test_file_generator_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))


obj = release_static_env.Object('stress_test_file_generator_static_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator.cpp'])
stress_test_file_generator_static_rel = release_static_env.Program('stress_test_file_generator_' + PLATFORM_STR + '_static_release', obj)

obj = debug_dynamic_env.Object('stress_test_file_generator_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator.cpp'])
stress_test_file_generator_dynamic_dbg = debug_dynamic_env.Program('stress_test_file_generator_' + PLATFORM_STR + '_dynamic_debug', obj)

if Platform().name == 'win32':
	debug_dynamic_env.AddPostAction(stress_test_file_generator_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


obj = debug_static_env.Object('stress_test_file_generator_static_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator.cpp'])
stress_test_file_generator_static_dbg = debug_static_env.Program('stress_test_file_generator_' + PLATFORM_STR + '_static_debug', obj)




##release_dynamic_env.Install(BIN_DIR, stress_test_file_generator_dynamic_rel)  
#release_dynamic_env.Install(TEST_DIR, stress_test_file_generator_dynamic_rel)  
#
##release_static_env.Install(BIN_DIR, stress_test_file_generator_static_rel)  
#release_static_env.Install(TEST_DIR, stress_test_file_generator_static_rel)  
#
##debug_dynamic_env.Install(BIN_DIR, stress_test_file_generator_dynamic_dbg)  
##debug_dynamic_env.Install(TEST_DIR, stress_test_file_generator_dynamic_dbg)  
#
##debug_static_env.Install(BIN_DIR, stress_test_file_generator_static_dbg)  
##debug_static_env.Install(TEST_DIR, stress_test_file_generator_static_dbg)  






# -------------- stress_test_file_generator_and_watcher

obj = release_dynamic_env.Object('stress_test_file_generator_and_watcher_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator_and_watcher.cpp'])
stress_test_file_generator_and_watcher_dynamic_rel = release_dynamic_env.Program('stress_test_file_generator_and_watcher_' + PLATFORM_STR + '_dynamic_release', obj)

if Platform().name == 'win32':
	release_dynamic_env.AddPostAction(stress_test_file_generator_and_watcher_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')

Command(TEST_DIR + "/" + string.replace(str( stress_test_file_generator_and_watcher_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( stress_test_file_generator_and_watcher_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))


obj = release_static_env.Object('stress_test_file_generator_and_watcher_static_rel', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator_and_watcher.cpp'])
stress_test_file_generator_and_watcher_static_rel = release_static_env.Program('stress_test_file_generator_and_watcher_' + PLATFORM_STR + '_static_release', obj)

obj = debug_dynamic_env.Object('stress_test_file_generator_and_watcher_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator_and_watcher.cpp'])
stress_test_file_generator_and_watcher_dynamic_dbg = debug_dynamic_env.Program('stress_test_file_generator_and_watcher_' + PLATFORM_STR + '_dynamic_debug', obj)

if Platform().name == 'win32':
	debug_dynamic_env.AddPostAction(stress_test_file_generator_and_watcher_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')


obj = debug_static_env.Object('stress_test_file_generator_and_watcher_static_dbg', [ SRC_DIR + '/libs/os_services/test/stress_test_file_generator_and_watcher.cpp'])
stress_test_file_generator_and_watcher_static_dbg = debug_static_env.Program('stress_test_file_generator_and_watcher_' + PLATFORM_STR + '_static_debug', obj)


##release_dynamic_env.Install(BIN_DIR, stress_test_file_generator_and_watcher_dynamic_rel)  
#release_dynamic_env.Install(TEST_DIR, stress_test_file_generator_and_watcher_dynamic_rel)  
#
##release_static_env.Install(BIN_DIR, stress_test_file_generator_and_watcher_static_rel)  
#release_static_env.Install(TEST_DIR, stress_test_file_generator_and_watcher_static_rel)  
#
##debug_dynamic_env.Install(BIN_DIR, stress_test_file_generator_and_watcher_dynamic_dbg)  
##debug_dynamic_env.Install(TEST_DIR, stress_test_file_generator_and_watcher_dynamic_dbg)  
#
##debug_static_env.Install(BIN_DIR, stress_test_file_generator_and_watcher_static_dbg)  
##debug_static_env.Install(TEST_DIR, stress_test_file_generator_and_watcher_static_dbg)  






## -------------- test
#
#obj = release_dynamic_env.Object('test_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/test.cpp'])
#test_dynamic_rel = release_dynamic_env.Program('test_' + PLATFORM_STR + '_dynamic_release', obj)
#
#if Platform().name == 'win32':
#	release_dynamic_env.AddPostAction(release_dynamic_env, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')
#
#
#Command(TEST_DIR + "/" + string.replace(str( test_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( test_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))
#
#
#obj = release_static_env.Object('test_static_rel', [ SRC_DIR + '/libs/os_services/test/test.cpp'])
#test_static_rel = release_static_env.Program('test_' + PLATFORM_STR + '_static_release', obj)
#
#obj = debug_dynamic_env.Object('test_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/test.cpp'])
#test_dynamic_dbg = debug_dynamic_env.Program('test_' + PLATFORM_STR + '_dynamic_debug', obj)
#
#if Platform().name == 'win32':
#	debug_dynamic_env.AddPostAction(debug_dynamic_env, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')
#
#
#obj = debug_static_env.Object('test_static_dbg', [ SRC_DIR + '/libs/os_services/test/test.cpp'])
#test_static_dbg = debug_static_env.Program('test_' + PLATFORM_STR + '_static_debug', obj)




## -------------- test_cin
#
#obj = release_dynamic_env.Object('test_cin_dynamic_rel', [ SRC_DIR + '/libs/os_services/test/test_cin.cpp'])
#test_cin_dynamic_rel = release_dynamic_env.Program('test_cin_' + PLATFORM_STR + '_dynamic_release', obj ) #CPPFLAGS = ['/MD'] ) 
#
#if Platform().name == 'win32':
#	release_dynamic_env.AddPostAction(test_cin_dynamic_rel, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')
#
#Command(TEST_DIR + "/" + string.replace(str( test_cin_dynamic_rel[0] ), "_" + PLATFORM_STR + "_dynamic_release", ""), BUILD_DIR + "/" + str ( test_cin_dynamic_rel[0] ), Copy("$TARGET", "$SOURCE"))
#
#
#obj = release_static_env.Object('test_cin_static_rel', [ SRC_DIR + '/libs/os_services/test/test_cin.cpp'])
#test_cin_static_rel = release_static_env.Program('test_cin_' + PLATFORM_STR + '_static_release', obj )
#
#obj = debug_dynamic_env.Object('test_cin_dynamic_dbg', [ SRC_DIR + '/libs/os_services/test/test_cin.cpp'])
#test_cin_dynamic_dbg = debug_dynamic_env.Program('test_cin_' + PLATFORM_STR + '_dynamic_debug', obj)
#
#if Platform().name == 'win32':
#	debug_dynamic_env.AddPostAction(test_cin_dynamic_dbg, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')
#
#
#obj = debug_static_env.Object('test_cin_static_dbg', [ SRC_DIR + '/libs/os_services/test/test_cin.cpp'])
#test_cin_static_dbg = debug_static_env.Program('test_cin_' + PLATFORM_STR + '_static_debug', obj)






# -------------- -------------- -------------- -------------- -------------- --------------


#release_dynamic_env.Alias('install', BIN_DIR)
release_dynamic_env.Alias('install', TEST_DIR)

#release_static_env.Alias('install', BIN_DIR)
release_static_env.Alias('install', TEST_DIR)

#debug_dynamic_env.Alias('install', BIN_DIR)
#debug_dynamic_env.Alias('install', TEST_DIR)

#debug_static_env.Alias('install', BIN_DIR)
#debug_static_env.Alias('install', TEST_DIR)



